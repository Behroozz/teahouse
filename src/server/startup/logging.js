const winston = require('winston')
require('winston-mongodb')
// https://www.npmjs.com/package/express-async-errors
// instead of patching all the routers with err, we use this lib
require('express-async-errors')

module.exports = function() {
  //UncaughtException
  winston.exceptions.handle(
    new winston.transports.Console({ colorize: true, prettyPrint: true }),
    new winston.transports.File({ filename: '../logs/uncaughtExceptions.log'})
  )

  process.on('unhandledRejection', (ex) => {
    winston.error(ex.message, ex)
    process.exit(1)
  })

  new winston.transports.Console({ colorize: true, prettyPrint: true }),
  winston.add(new winston.transports.File({ filename: '../logs/logfile.log' }))
  // winston.add(new winston.transports.MongoDB({ db: 'mongodb://mongo:27017/teahouse-app', level: 'error'}))
}






// Notes:
// UncaughtException vs unhandledRejection
// Uncaught Exception is when you throw an error and did not catch anywhere.
// Unhandled promise rejection is similar, when you fail to catch a Promise.reject.
// It's about whether the error was generated by throw or by Promise.reject 
// (more like error generate from sync vs async process/code). Note that throw 
// inside an async function is Promise.reject as async functions are wrapped 
// inside Promise for you

